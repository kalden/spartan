#PVALS_HEADERS <- cbind(PVALS_HEADERS, paste(PVAL_LABEL, "_",
#                                            TIMEPOINTPROCESSING,
#                                            sep = ""))
} else {
message(paste("Correlation Coefficients file for Timepoint ",
TIMEPOINTPROCESSING, " does not exist", sep = ""))
}
}
MEASURE <- MEASURES[m]
PRCC_LABEL <- paste(MEASURE, "_Estimate", sep = "")
PVAL_LABEL <- paste(MEASURE, "_PValue", sep = "")
PRCCS_OVER_TIME <- NULL
PVALS_OVER_TIME <- NULL
PRCC_HEADERS <- c("Parameter Name")
PVALS_HEADERS <- c("Parameter Name")
for (t in 1:length(TIMEPOINTS)) {
TIMEPOINTPROCESSING <- TIMEPOINTS[t]
CORCOEFFSOUTPUTFILE_FORMAT <- check_file_extension(CORCOEFFSOUTPUTFILE)
CORCOEFFSOUTPUTFILE_FULL <- paste(substr(CORCOEFFSOUTPUTFILE, 0,
nchar(CORCOEFFSOUTPUTFILE) - 4),
"_", TIMEPOINTPROCESSING, ".",
CORCOEFFSOUTPUTFILE_FORMAT, sep = "")
if (file.exists(paste(FILEPATH, "/", CORCOEFFSOUTPUTFILE_FULL,
sep = ""))) {
COEFFS_TIMEPOINT <- read.csv(paste(FILEPATH, "/",
CORCOEFFSOUTPUTFILE_FULL,
sep = ""), header = T)
# Added with spartan4: first column should be rownames
COEFFS_TIMEPOINT<-column_to_rownames(COEFFS_TIMEPOINT,var="X")
#if (t == 1) {
# Copy over the parameter name in this instance and  the result
#PRCCS_OVER_TIME <- COEFFS_TIMEPOINT["X"]
PRCCS_OVER_TIME <- bind_rows(PRCCS_OVER_TIME, bind_cols(as_data_frame(TIMEPOINTS[t]),as_data_frame(MEASURES[m]), COEFFS_TIMEPOINT[paste(MEASURES[m],"estimate",sep="."),]))
PVALS_OVER_TIME <- bind_rows(PVALS_OVER_TIME, bind_cols(as_data_frame(TIMEPOINTS[t]),as_data_frame(MEASURES[m]), COEFFS_TIMEPOINT[paste(MEASURES[m],"p.value",sep="."),]))
#PVALS_OVER_TIME <- cbind(PVALS_OVER_TIME,
#                         COEFFS_TIMEPOINT[PVAL_LABEL])
#} else {
#  PRCCS_OVER_TIME <- cbind(PRCCS_OVER_TIME,
#                           COEFFS_TIMEPOINT[PRCC_LABEL])
#  PVALS_OVER_TIME <- cbind(PVALS_OVER_TIME,
#                           COEFFS_TIMEPOINT[PVAL_LABEL])
#}
#PRCC_HEADERS <- cbind(PRCC_HEADERS, paste(PRCC_LABEL, "_",
#                                          TIMEPOINTPROCESSING,
#                                          sep = ""))
#PVALS_HEADERS <- cbind(PVALS_HEADERS, paste(PVAL_LABEL, "_",
#                                            TIMEPOINTPROCESSING,
#                                            sep = ""))
} else {
message(paste("Correlation Coefficients file for Timepoint ",
TIMEPOINTPROCESSING, " does not exist", sep = ""))
}
}
PRCCS_OVER_TIME
# ADD HEADERS TO THE PRCC RESULTS
colnames(PRCCS_OVER_TIME) <- c("Timepoint","Measure",colnames(PRCCS_OVER_TIME[3:ncol(PRCCS_OVER_TIME)]))
colnames(PVALS_OVER_TIME) <- c("Timepoint","Measure",colnames(PRCCS_OVER_TIME[3:ncol(PRCCS_OVER_TIME)]))
PRCCS_OVER_TIME
RESULTSFILE <- paste(FILEPATH, "/All_Timepoint_PRCCS_", MEASURE, ".csv",
sep = "")
write.csv(PRCCS_OVER_TIME, RESULTSFILE, quote = FALSE, row.names = FALSE)
RESULTSFILE <- paste(FILEPATH, "/All_Timepoint_PVALS_", MEASURE, ".csv",
sep = "")
write.csv(PVALS_OVER_TIME, RESULTSFILE, quote = FALSE, row.names = FALSE)
devtools::test()
devtools::test()
rm(list=ls())
load(file.path("LHC_Summary.Rda"))
# Write to file so can be read in
write.csv(LHCRESULTFILE,file="LHC_Results.csv",row.names=F,quote=F)
# Load Correlation Coefficients
load(file.path("test_cor_coeffs.Rda"))
write.csv(test_cor_coeffs,file="Test_Cor_Coeffs.csv",row.names=F,quote=F)
FILEPATH<-getwd()
parameters<-c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope")
measures<-c("Velocity","Displacement")
MEASURE_SCALE<-c("microns/min","microns")
corcoeffs_outputfile<-"Test_Cor_Coeffs.csv"
lhcsummary_filename<-"LHC_Results.csv"
OUTPUT_TYPE = c("PDF","PNG")
# get the simulation response data
lhcresult <- get_lhc_summary_data(FILEPATH, lhcsummary_filename, lhcsummary_object)
# Get data into format where each parameter value is paired with responses
graph_data<-lapply(lhcresult[parameters], function(x,y){bind_cols(as_data_frame(x),as_data_frame(y))}, lhcresult[MEASURES])
# Get data into format where each parameter value is paired with responses
graph_data<-lapply(lhcresult[parameters], function(x,y){bind_cols(as_data_frame(x),as_data_frame(y))}, lhcresult[measures])
# get the correlation coefficients for including on the plot
cor_coefficients <- get_correlation_stat_data(FILEPATH,corcoeffs_outputfile, corcoeffs_outputobject)
# Now we can make the plot pairings
walk(measures,iterate_results_for_plotting, graph_data, parameters, cor_coefficients)
cor_coefficients
measures
graph_data
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
pwalk(list(param_data=data_to_plot, parameter= parameters, coefficient=coefficients[paste0(measure,".estimate"),]),make_lhc_plot, measure)
# Now we can make the plot pairings
walk(measures,iterate_results_for_plotting, graph_data, parameters, cor_coefficients)
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
# Now we can make the plot pairings
walk(measures,iterate_results_for_plotting, graph_data, parameters, cor_coefficients)
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
# Now we can make the plot pairings
walk(measures,iterate_results_for_plotting, graph_data, parameters, cor_coefficients)
coefficients[paste0(measure,".estimate"),])
coefficients[paste0(measure,".estimate"),]
coefficients[paste0("Velocity",".estimate"),]
cor_coefficients[paste0("Velocity",".estimate")]
cor_coefficients[paste0("Velocity",".estimate"),]
cor_coefficients
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
# get the correlation coefficients for including on the plot
cor_coefficients <- get_correlation_stat_data(FILEPATH,corcoeffs_outputfile, corcoeffs_outputobject)
cor_coefficients
coefficients<-cor_coefficients
coefficients[paste0(measure,".estimate"),]
measure<-"Velocity"
coefficients[paste0(measure,".estimate"),]
corcoeffs_outputfile
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Coeff_data_for_test.Rda")
coeff_data_for_test
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/test_cor_coeffs.Rda")
load(file.path("LHC_Summary.Rda"))
load(file.path("LHC_Summary_36.Rda"))
write.csv(LHCRESULTFILE,file="LHC_Results_12.csv",row.names=T,quote=F)
write.csv(LHCRESULTFILE_36,file="LHC_Results_36.csv",row.names=T,quote=F)
lhc_generatePRCoEffs(
getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), "LHC_Results.csv", "Prcc_Out.csv",c(12,36),"Hours")
b<-read_csv("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Prcc_Out_12.csv")
b
b<-read_csv("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Prcc_Out_12.csv",rowid_to_column(X))
b<-read_csv("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Prcc_Out_12.csv",rowid_to_column(1))
b<-read_csv("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Prcc_Out_12.csv")
b
test_cor_coeffs<-b
b
save(test_cor_coeffs,"test_cor_coeffs.Rda")
save(test_cor_coeffs,file="test_cor_coeffs.Rda")
rm(list=ls())
load(file.path("LHC_Summary.Rda"))
# Write to file so can be read in
write.csv(LHCRESULTFILE,file="LHC_Results.csv",row.names=F,quote=F)
# Load Correlation Coefficients
load(file.path("test_cor_coeffs.Rda"))
write.csv(test_cor_coeffs,file="Test_Cor_Coeffs.csv",row.names=F,quote=F)
# All internals have been tested - we now need to check for output
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"))
FILEPATH<-getwd()
parameters<-c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope")
measureS<- c("Velocity","Displacement")
measures<- c("Velocity","Displacement")
MEASURE_SCALE<-c("microns/min","microns")
corcoeffs_outputfile<-"Test_Cor_Coeffs.csv"
lhcsummary_filename<-"LHC_Results.csv"
OUTPUT_TYPE = c("PDF","PNG")
# get the simulation response data
lhcresult <- get_lhc_summary_data(FILEPATH, lhcsummary_filename, lhcsummary_object)
# Get data into format where each parameter value is paired with responses
graph_data<-lapply(lhcresult[parameters], function(x,y){bind_cols(as_data_frame(x),as_data_frame(y))}, lhcresult[measures])
# get the correlation coefficients for including on the plot
cor_coefficients <- get_correlation_stat_data(FILEPATH,corcoeffs_outputfile, corcoeffs_outputobject)
!is.null(corcoeffs_outputfile)
read_from_csv(file.path(FILEPATH,corcoeffs_outputfile))
column_to_rownames(read_from_csv(file.path(FILEPATH,corcoeffs_outputfile)), var = "X1")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
# get the correlation coefficients for including on the plot
cor_coefficients <- get_correlation_stat_data(FILEPATH,corcoeffs_outputfile, corcoeffs_outputobject)
cor_coefficients
coefficients<-cor_coefficients
measure<-"Velocity"
message(paste0("Producing plots for response ",measure))
data_to_plot<-graph_data
message(paste0("Producing plots for response ",measure))
message(length(data_to_plot))
message(length(parameters))
message(length(coefficients[paste0(measure,".estimate"),]))
coefficient=coefficients[paste0(measure,".estimate"),]
coefficients[paste0(measure,".estimate"),]
# Now we can make the plot pairings
walk(measures,iterate_results_for_plotting, graph_data, parameters, cor_coefficients)
b<-read_csv("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Prcc_Out_36.csv")
test_cor_coeffs_36<-b
save(test_cor_coeffs_36,file="test_cor_coeffs_36.Rda")
load(file.path("LHC_Summary.Rda"))
# Write to file so can be read in
write.csv(LHCRESULTFILE,file="LHC_Results.csv",row.names=F,quote=F)
# Load Correlation Coefficients
load(file.path("test_cor_coeffs.Rda"))
write.csv(test_cor_coeffs,file="Test_Cor_Coeffs.csv",row.names=F,quote=F)
# All internals have been tested - we now need to check for output
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"))
devtools::test()
load(file.path("LHC_Summary.Rda"))
# Write to file so can be read in
write.csv(LHCRESULTFILE,file="LHC_Results.csv",row.names=F,quote=F)
# Load Correlation Coefficients
load(file.path("test_cor_coeffs.Rda"))
write.csv(test_cor_coeffs,file="Test_Cor_Coeffs.csv",row.names=F,quote=F)
# All internals have been tested - we now need to check for output
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"))
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
load(file.path("LHC_Summary.Rda"))
# Write to file so can be read in
write.csv(LHCRESULTFILE,file="LHC_Results.csv",row.names=F,quote=F)
# Load Correlation Coefficients
load(file.path("test_cor_coeffs.Rda"))
write.csv(test_cor_coeffs,file="Test_Cor_Coeffs.csv",row.names=F,quote=F)
# All internals have been tested - we now need to check for output
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"))
file.exists(file.path(getwd(),"thresholdBindProbability_Velocity.png"))
devtools::test()
load(file.path("LHC_Summary.Rda"))
load(file.path("LHC_Summary_36.Rda"))
write.csv(LHCRESULTFILE,file="LHC_Results_12.csv",row.names=F,quote=F)
write.csv(LHCRESULTFILE_36,file="LHC_Results_36.csv",row.names=F,quote=F)
# Load Correlation Coefficients
load(file.path("test_cor_coeffs.Rda"))
load(file.path("test_cor_coeffs_36.Rda"))
write.csv(test_cor_coeffs,file="Test_Cor_Coeffs_12.csv",row.names=F,quote=F)
write.csv(test_cor_coeffs_36,file="Test_Cor_Coeffs_36.csv",row.names=F,quote=F)
FILEPATH<-getwd()
parameters<-c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope")
measures<-c("Velocity","Displacement")
corcoeffs_outputfile<-"Test_Cor_Coeffs.csv"
lhcsummary_filename<-"LHC_Results.csv"
OUTPUT_TYPE = c("PDF","PNG")
TIMEPOINTS<-c(12,36)
TIMEPOINTSCALE<-"Hours"
is.null(TIMEPOINTS)
n<-1
current_time <- TIMEPOINTS[n]
message(paste("Processing Timepoint: ", current_time, sep = ""))
corcoeffs_output_full <- append_time_to_argument(
CORCOEFFSOUTPUTFILE, current_time,
check_file_extension(CORCOEFFSOUTPUTFILE))
CORCOEFFSOUTPUTFILE<-corcoeffs_outputfile
LHCSUMMARYFILENAME<-lhcsummary_filename
corcoeffs_output_full <- append_time_to_argument(
CORCOEFFSOUTPUTFILE, current_time,
check_file_extension(CORCOEFFSOUTPUTFILE))
corcoeffs_output_full
lhcsummary_full <- append_time_to_argument(
LHCSUMMARYFILENAME, current_time,
check_file_extension(LHCSUMMARYFILENAME))
lhcsummary_full
PARAMETERS<-parameters
MEASURES<-measures
GRAPHTIME<-current_time
lhc_graphMeasuresForParameterChange(
FILEPATH, PARAMETERS, MEASURES, MEASURE_SCALE, corcoeffs_output_full,
lhcsummary_full, TIMEPOINTS = NULL, TIMEPOINTSCALE = TIMEPOINTSCALE,
GRAPHTIME = current_time, check_done = TRUE)
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
# All internals have been tested - we now need to check for output
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"),TIMEPOINTS=c(12,36),TIMEPOINTSCALE="Hours")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
# All internals have been tested - we now need to check for output
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"),TIMEPOINTS=c(12,36),TIMEPOINTSCALE="Hours")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
# All internals have been tested - we now need to check for output
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"),TIMEPOINTS=c(12,36),TIMEPOINTSCALE="Hours")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"),TIMEPOINTS=c(12,36),TIMEPOINTSCALE="Hours")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"),TIMEPOINTS=c(12,36),TIMEPOINTSCALE="Hours")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
lhc_graphMeasuresForParameterChange(getwd(), c("thresholdBindProbability", "chemoThreshold", "chemoUpperLinearAdjust",
"chemoLowerLinearAdjust", "maxVCAMeffectProbabilityCutoff", "vcamSlope"),
c("Velocity","Displacement"), c("microns/min","microns"), "Test_Cor_Coeffs.csv",
"LHC_Results.csv", OUTPUT_TYPE = c("PDF","PNG"),TIMEPOINTS=c(12,36),TIMEPOINTSCALE="Hours")
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
devtools::test()
load(file.path("test_cor_coeffs.Rda"))
write.csv(test_cor_coeffs,file="Test_Cor_Coeffs.csv",row.names=F,quote=F)
FILEPATH
PARAMETERS
MEASURES
CORCOEFFSOUTPUTFILE
TIMEPOINTS = NULL
TIMEPOINTSCALE = NULL
is.null(TIMEPOINTS) || length(TIMEPOINTS) == 1
# Read in the file
CORCOEFFS <- read.csv(paste(FILEPATH, "/", CORCOEFFSOUTPUTFILE,
sep = ""),
header = TRUE, check.names = FALSE,
row.names = 1)
CORCOEFFS
# Read in the file
CORCOEFFS <- get_correlation_stat_data(FILEPATH, corcoeffs_outputfile, corcoeffs_outputobject)
CORCOEFFS
# Plot set up:
# convert 360 degrees to radians
circle_in_radians <- 6.28319
# outputs:
output_forms <- c("png", "pdf")
m<-1
CORCOEFFS
CORCOEFFS[paste0("Velocity",".estimate"),]
which(is.na(CORCOEFFS[paste0("Velocity",".estimate"),]))
na_corrs<-which(is.na(CORCOEFFS[paste0("Velocity",".estimate"),]))
length(na_corrs)
U<-CORCOEFFS
U
U[1,]
U[1,3]
U[1,3]<-NA
U
CORCOEFFS_PROPER<-CORCOEFFS
CORCOEFFS<-U
CORCOEFFS
m
# Need to exclude any parameters that are NA prior to plotting
#na_corrs <- which(is.na(CORCOEFFS[,paste0(MEASURES[m],"_Estimate")]))
na_corrs <- which(is.na(CORCOEFFS[paste0(MEASURES[m],".estimate"),]))
na_corrs
plot_parameters<-PARAMETERS
length(na_corrs)>0
plot_parameters<-PARAMETERS[!(PARAMETERS %in% PARAMETERS[na_corrs])]
plot_parameters
message(paste0("For Measure ",MEASURES[m],", Parameter(s) ",toString(PARAMETERS[na_corrs])," reported correlation coefficients of NA. Excluded from Plot. Check calculation"))
length(plot_parameters)>0
degree <- circle_in_radians / length(plot_parameters)
# Create the angles at which the PARAMETERS will be shown on the
# plot, as well as the colours (blue negative, red positive)
angle <- c()
colours <- c()
CORCOEFFS
CORCOEFFS[paste0(MEASURES[m],".estimate"),plot_parameters[i]]
CORCOEFFS[paste0(MEASURES[m],".estimate"),plot_parameters[1]]
i<-1
CORCOEFFS[paste0(MEASURES[m],".estimate"),plot_parameters[i]]
CORCOEFFS[paste0(MEASURES[m],".estimate"),plot_parameters]
na_corrs <- which(is.na(CORCOEFFS[paste0(MEASURES[m],".estimate"),]))
plot_parameters<-PARAMETERS
if(length(na_corrs)>0)
{
plot_parameters<-PARAMETERS[!(PARAMETERS %in% PARAMETERS[na_corrs])]
message(paste0("For Measure ",MEASURES[m],", Parameter(s) ",toString(PARAMETERS[na_corrs])," reported correlation coefficients of NA. Excluded from Plot. Check calculation"))
}
degree <- circle_in_radians / length(plot_parameters)
# Create the angles at which the PARAMETERS will be shown on the
# plot, as well as the colours (blue negative, red positive)
angle <- c()
colours <- c()
#for (i in 1:length(PARAMETERS)) {
for (i in 1:length(plot_parameters))
{
angle <- c(angle, degree * i)
# Now see if the correlation is positive or negative
#if (CORCOEFFS[PARAMETERS[i], col_head] < 0)
if (CORCOEFFS[paste0(MEASURES[m],".estimate"),plot_parameters[i]] < 0)
{
colours <- c(colours, "blue")
} else {
colours <- c(colours, "red")
}
}
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[paste0(MEASURES[m],".estimate"),plot_parameters]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.7,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
param_legend<-paste(1:length(PARAM_NAMES),PARAM_NAMES)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
}
CORCOEFFS[paste0(MEASURES[m],".estimate"),plot_parameters]
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
devtools::test()
load(file.path("test_cor_coeffs.Rda"))
write.csv(test_cor_coeffs,file="graph_area/Test_Cor_Coeffs.csv",row.names=F,quote=F)
FILEPATH<-paste(getwd(),"/graph_area",sep="")
CORCOEFFSOUTPUTFILE<-"Test_Cor_Coeffs.csv"
MEASURES<-c("Velocity","Displacement")
PRINTOPT<-"ALL"
CORCOEFFS <- get_correlation_stat_data(FILEPATH, corcoeffs_outputfile, NULL)
message("Producing Partial Rank Correlation Coefficient Summary Plot of All Measures")
GRAPHFILE <- paste(FILEPATH, "/PRCC_AllMeasures.pdf", sep = "")
GRAPHTITLE <- "PRCC Values for All Measures"
par(xpd = NA, mar = c(2, 4, 2, 9))
PRCCS <- NULL
seq(2, ncol(COEFFS), by = 2)
CORCOEFFS
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
devtools::document()
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
warnings()
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
warnings()
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
warnings()
warnings()
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
warnings()
devtools::document()
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
devtools::test()
devtools::check()
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
sessionInfo()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
load(file.path("LHC_Summary.Rda"))
# Write to file so can be read in
write.csv(LHCRESULTFILE,file="LHC_Results.csv",row.names=T,quote=F)
lhc_result_file <- read_from_csv(file.path(FILEPATH,LHCSUMMARYFILENAME))
FILEPATH
FILEPATH<-"/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/"
lhc_result_file <- read_from_csv(file.path(FILEPATH,LHCSUMMARYFILENAME))
message("Generating Partial Rank Correlation Coefficients (lhc_generatePRCoEffs)")
coeff_results<-data.frame(map(PARAMETERS, all_prccs_for_parameter, lhc_result_file, MEASURES, cor_calc_method=c("s")) %>% setNames(PARAMETERS))
head(lhc_result_file)
read_from_csv(file.path(FILEPATH,LHCSUMMARYFILENAME))
ncol(read_from_csv(file.path(FILEPATH,LHCSUMMARYFILENAME)))
read_from_csv(file.path(FILEPATH,LHCSUMMARYFILENAME),row.names=FALSE)
lhc_result_file <- read_csv(file.path(FILEPATH,LHCSUMMARYFILENAME))
LHCSUMMARYFILENAME
load(file.path("LHC_Summary.Rda"))
# Write to file so can be read in
write.csv(LHCRESULTFILE,file="LHC_Results.csv",row.names=F,quote=F)
lhc_result_file <- read_csv(file.path(FILEPATH,LHCSUMMARYFILENAME))
lhc_result_file <- read_csv(file.path(FILEPATH,LHCSUMMARYFILENAME),show_progress=FALSE)
lhc_result_file <- suppressMessages(read_csv(file.path(FILEPATH,LHCSUMMARYFILENAME)))
??suppressMessages
head(lhc_result_file)
coeff_results<-data.frame(map(PARAMETERS, all_prccs_for_parameter, lhc_result_file, MEASURES, cor_calc_method=c("s")) %>% setNames(PARAMETERS))
head(coeff_results)
devtools::check()
devtools::document()
devtools::check()
